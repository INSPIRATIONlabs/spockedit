<?php

define(SPOCKEDIT_CONFIG_JS, base_path() . drupal_get_path('module', 'spockedit') . '/spockedit_config.js');

function spockedit_menu() {
  $items = array();

  $items['admin/config/content/spockedit'] = array(
    'title' => 'SPOckedit Settings',
    'description' => 'Configuration for SPOckedit module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('spockedit_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

function spockedit_form($form) {
  $form['actions']['#type'] = 'actions';

  //settings
  $form['spockedit_ck_config_url'] = array(
    '#type' => 'textfield',
    '#title' => t('URL to config.js'),
    '#default_value' => variable_get('spockedit_ck_config_url'),
    '#size' => ,
    '#maxlength' => 2,
    '#description' => t('URL to <a href="'.variable_get('spockedit_ck_config_url', SPOCKEDIT_CONFIG_JS).'">config.js</a> for ckeditor. If not set, the following file will be used: <a href="'.SPOCKEDIT_CONFIG_JS.'">'.SPOCKEDIT_CONFIG_JS.'</a>.'),
    '#required' => FALSE,
  );

  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save configuration'),
  );

  if (!empty($_POST) && form_get_errors()) {
    drupal_set_message(t('The settings have not been saved because of the errors.'), 'error');
  }
  $form['#submit'][] = 'system_settings_form_submit';
  // By default, render the form using theme_system_settings_form().
  if (!isset($form['#theme'])) {
    $form['#theme'] = 'system_settings_form';
  }

  return system_settings_form($form);
}

/**
 * @file ckeditor_custom.module
 *
 * Includes tweaks to ckeditor that can't be performed through config.
 */

/**
 * Implements hook_wysiwyg_editor_settings_alter()
 */
function spockedit_wysiwyg_editor_settings_alter(&$settings, $context) {

  // The $context variable contains information about the wysiwyg profile we're using
  // In this case we just need to check that the editor being used is ckeditor
  if ($context['profile']->editor == 'ckeditor') {

    // Specify the custom config file that defines our font styles
    $settings['customConfig'] = variable_get('spockedit_ck_config_url', SPOCKEDIT_CONFIG_JS);

    // We are also going to specify a custom body id and class
    $settings['bodyId'] = 'spockedit_custom_id';
    $settings['bodyClass'] = 'spockedit_custom_class';

    // Make sure the toolbar is there
    if (!empty($settings['toolbar'])) {

      // These are our desired groupings. Buttons that aren't listed here will be
      // Grouped in one big group at the end
      $preferred_groupings[] = array('Source');
      $preferred_groupings[] = array('Bold', 'Italic', 'Underline', 'Strike');
      $preferred_groupings[] = array('JustifyLeft', 'JustifyCenter',
                                     'JustifyRight', 'JustifyBlock');
      $preferred_groupings[] = array('BulletedList', 'NumberedList', 'Outdent', 'Indent');
      $preferred_groupings[] = array('Undo', 'Redo');
      $preferred_groupings[] = array('Image', 'Link', 'Unlink', 'Anchor', '-');
      $preferred_groupings[] = array('TextColor', 'BGColor');
      $preferred_groupings[] = array('Superscript', 'Subscript', 'Blockquote');
      $preferred_groupings[] = array('HorizontalRule', 'break');
      $preferred_groupings[] = array('Cut', 'Copy', 'Paste', 'PasteText', 'PasteFromWord');
      $preferred_groupings[] = array('ShowBlocks', 'RemoveFormat', 'SpecialChar', '/');
      $preferred_groupings[] = array('Format', 'Font', 'FontSize', 'Styles', 'Table');
      $preferred_groupings[] = array('SelectAll', 'Find', 'Replace');
      $preferred_groupings[] = array('Flash', 'Smiley');
      $preferred_groupings[] = array('CreateDiv', 'Maximize', 'SpellChecker', 'Scayt');

      // An array to hold our newly grouped buttons
      $new_grouped_toolbar = array();

      // Compare each desired groupings to the configured buttons in the toolbar
      // and add them if they are there
      foreach($preferred_groupings as $button_group){

        // array_intersect() compares two arrays and returns an array of values
        // That are present in both arrays.
        $matching_buttons = array_intersect($button_group, $settings['toolbar'][0]);

        if (!empty($matching_buttons)) {
          // If there are matching buttons, we add it as an array to our
          // $new_grouped_toolbar. We run $matching_buttons through array_values()
          // to reset the array keys back to starting from 0.
          $new_grouped_toolbar[] = array_values($matching_buttons);
        }

      }

      // For extra safety, we're going to find any remaining buttons that we
      // missed. To do this we need to flatten our grouped buttons and compare
      // that against the original toolbar to see if we missed anything
      $new_flattened_toolbar = array();

      // Flatten our grouped buttons
      foreach ($new_grouped_toolbar as $key => $group) {
        $new_flattened_toolbar = array_merge($new_flattened_toolbar, $group);
      }

      // Array diff returns the keys that are present in the first argument, but
      // not not present in the second
      $remaining_buttons = array_diff($settings['toolbar'][0], $new_flattened_toolbar);

      if (!empty($remaining_buttons)) {
        // reset the array keys and add it to the $new_grouped_toolbar
        $new_grouped_toolbar[] = array_values($remaining_buttons);
      }

      // Replace the toolbar with our new, grouped toolbar.
      $settings['toolbar'] = $new_grouped_toolbar;

    }
  }
}

function OFF__ckeditor_custom_wysiwyg_plugin($editor, $version) {
  switch ($editor) {
    case 'ckeditor':
      return array(
        'mytemplates' => array(
          'url' => '',
          'path' => drupal_get_path('module', 'ckeditor_custom') . '/plugins/templates',
	        'filename' => 'plugin.js',
          'buttons' => array('templates' => t('Templates')),
          'load' => TRUE,
          'internal' => FALSE,
        ),
        'youtube' => array(
            // A URL to the plugin's homepage.
            'url' => '',
            // The full path to the native editor plugin, no trailing slash.
            // Ignored when 'internal' is set to TRUE below.
            'path' => drupal_get_path('module', 'ckeditor_custom') . '/plugins/youtube',
            // The name of the plugin's main JavaScript file.
            // Ignored when 'internal' is set to TRUE below.
            // Default value depends on which editor the plugin is for.
            'filename' => 'plugin.js',
            // A list of buttons provided by this native plugin. The key has to
            // match the corresponding JavaScript implementation - when it's
            // created using editor.ui.addButton(). The value is is displayed on
            // the editor configuration form only.
            'buttons' => array(
              'YouTube' => t('You Tube Embed'),
            ),
            // Boolean whether the editor needs to load this plugin. When TRUE,
            // the editor will automatically load the plugin based on the 'path'
            // variable provided. If FALSE, the plugin either does not need to
            // be loaded or is already loaded by something else on the page.
            // Most plugins should define TRUE here.
            'load' => TRUE,
            // Boolean whether this plugin is a native plugin, i.e. shipped with
            // the editor. Definition must be ommitted for plugins provided by
            // other modules. TRUE means 'path' and 'filename' above are ignored
            // and the plugin is instead loaded from the editor's plugin folder.
            'internal' => FALSE,
        ),
      );
  }
}
